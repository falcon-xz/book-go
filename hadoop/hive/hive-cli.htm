<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<title>hive cli</title>
<style>
.table{
	
	width:100%;
	margin-left:10px;
	
}
.table tr td{
	
	border:1px solid black;
}

</style>
</head>

<body>
<h4>hive-cli调用过程</h4>
<ul style=" list-style-type: decimal;">
	<li>使用hive进入cli时，linux执行hive命令，调用${hive-home}/hive文件，之后选择调用的shell脚本<br/>
		cli使用${hive-home}/ext/cli.sh脚本<br/>
		执行org.apache.hadoop.hive.cli.CliDriver.java main<br/>
	</li>
	<br/>
	<li>1.CliDriver.java 首先判断调用命令是否能识别 如 hive -S -v -e 等<br/>
		2.初始化log4j<br/>
		3.初始化CliSessionState 包括配置(hive-site.xml,~/.hiverc)、jobconf所需jar。org.apache.hadoop.hive.conf.HiveConf 包括所有基本配置<br/>
			模式（-S -v -e）、历史命令、输入输出、子线程输入输出<br/>
		4.初始化默认库，临时文件，编译语句规则（括号，点等）<br/>
		5.processLine 解析输入的参数前，注册ctrl+c 事件 轮询输入遇;开始处理<br/>
		6.处理第一步:对特殊的命令如sourse、list、dfs等使用不同CommandProcessor处理类，阻塞式<br/>
		7.<span style="color:red">driver</span>处理第二步:输入流化，使用antlr对输入进行词法分析，生成抽象语法树AST，根据AST的token值使用不同BaseSemanticAnalyzer语法解析器<br/>
		8.<span style="color:red">driver-compile</span>处理第三步:编译并生成执行计划 如果只是查询表的列，不走MR，走fetch task，通过set hive.fetch.task.conversion=more 设置<br/>
		9.<span style="color:red">driver</span>处理第四步:设置MR配置，通过执行计划生成task任务，分为runnable和running任务,driverContext维护task任务，执行完之后打印信息<br/>
	</li>
	<br/><br/>
（4）生成逻辑执行计划，SemanticAnalyzer.genPlan完成。 <br/>
（5）优化逻辑执行计划，Optimizer完成，ParseContext作为上下文信息进行传递。 <br/>
（6）生成物理执行计划，SemanticAnalyzer.genMapRedTasks完成。 <br/>
（7）物理计划优化，PhysicalOptimizer完成，PhysicalContext作为上下文信息进行传递。 <br/>


</ul>
</body>

</html>
