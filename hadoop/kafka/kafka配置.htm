<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:v="urn:schemas-microsoft-com:vml" xmlns:o="urn:schemas-microsoft-com:office:office">

<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<title>kafka配置与优化</title>
<style>
.table{
	
	width:100%;
	margin-left:10px;
	
}
.table tr td{
	
	border:1px solid black;
}

</style>
</head>

<body>
<h4>kafka server.properties配置与优化</h4>



<span style="color:green">########################################## System 
##########################################</span><br />
<br />
broker.id=1<br />
port=9092<br />
host.name=TJDBSTORAGE<br />
<br />
# 处理网络请求的最大线程数<br />
num.network.threads=3<br />
# 处理磁盘I/O的线程数 不要小于磁盘的数量<br />
num.io.threads=8<br />
# 等待IO线程处理的请求队列最大数<br />
queued.max.requests=500<br />
<br />
# socket的发送缓冲区 100k<br />
socket.send.buffer.bytes=102400<br />
# socket的接收缓冲区<br />
socket.receive.buffer.bytes=102400<br />
# server能接受的请求的最大的大小，这是为了防止server跑光内存，不能大于Java堆的大小<br />
socket.request.max.bytes=104857600<br />
<br />
<br />
<span style="color:green">########################################## Topic 
##########################################</span><br />
<br />
# 每个topic的分区个数，更多的partition会产生更多的segment file<br />
num.partitions=1<br />
# 是否允许自动创建topic ，若是false，就需要通过命令创建topic<br />
auto.create.topics.enable=true<br />
# 一个topic ，默认分区的replication个数 ，不能大于集群中broker的个数<br />
default.replication.factor=1<br />
# 消息体的最大大小，单位是字节<br />
message.max.bytes=2000000<br />
<br />
<span style="color:green">########################################## ZooKeeper 
##########################################</span><br />
<br />
# Zookeeper quorum<br />
zookeeper.connect=TJDBSTORAGE:2181,TJMASTER:2181,TJDBMYSQL:2181<br />
# 连接zk的超时时间<br />
zookeeper.connection.timeout.ms=6000<br />
# ZooKeeper集群中 follower能落后leader多久<br />
zookeeper.sync.time.ms=2000<br />
<br />
<br />
<span style="color:green">########################################## Log 
##########################################</span><br />
<br />
#日志存放目录，多个目录使用逗号分割<br />
log.dirs=/sga/kafka-logs/,/sgb/kafka-logs/,/sgc/kafka-logs/<br />
# 当达到下面的消息数量时，会将数据flush到日志文件中<br />
log.flush.interval.messages=10000<br />
#当达到下面的时间(ms)时，执行一次强制的flush操作<br />
log.flush.interval.ms=3000<br />
# 检查是否需要将日志flush的时间间隔<br />
log.flush.scheduler.interval.ms=3000<br />
<br />
# 日志清理策略（delete|compact）<br />
log.cleanup.policy = delete<br />
# 日志清理时间间隔<br />
log.cleanup.interval.mins=10<br />
# 日志保存时间 (hours|minutes)，默认为7天（168小时）<br />
log.retention.hours=168<br />
# 日志数据存储的最大字节数 -1 不限<br />
log.retention.bytes=-1<br />
<br />
# 控制日志segment文件的大小，超出该大小则追加到一个新的日志segment文件中（-1表示没有限制，默认512M<br />
log.segment.bytes=1073741824<br />
# 当达到下面时间，会强制新建一个segment<br />
log.roll.hours=168<br />
# 日志片段文件的检查周期，查看它们是否达到了删除策略的设置（log.retention.hours或log.retention.bytes）<br />
#log.retention.check.interval.ms=60000<br />
<br />
# 是否开启压缩<br />
#log.cleaner.enable=false<br />
# 对于压缩的日志保留的最长时间<br />
#log.cleaner.delete.retention.ms = 1 day<br />
<br />
# 对于segment日志的索引文件大小限制 10M<br />
log.index.size.max.bytes=10485760<br />
#y索引计算的一个缓冲区，一般不需要设置。<br />
log.index.interval.bytes=4096<br />
<br />
<br />
<span style="color:green">########################################## replica 
##########################################</span><br />
<br />
# partition management controller 与replicas之间通讯的超时时间<br />
controller.socket.timeout.ms=30000<br />
# controller-to-broker-channels消息队列的尺寸大小<br />
controller.message.queue.size=10<br />
# replicas响应leader的最长等待时间，若是超过这个时间，就将replicas排除在管理之外<br />
replica.lag.time.max.ms=10000<br />
# 是否允许控制器关闭broker ,若是设置为true,会关闭所有在这个broker上的leader，并转移到其他broker<br />
controlled.shutdown.enable=false<br />
# 控制器关闭的尝试次数<br />
controlled.shutdown.max.retries=3<br />
# 每次关闭尝试的时间间隔<br />
controlled.shutdown.retry.backoff.ms=5000<br />
<br />
# 如果relicas落后太多,将会认为此partition relicas已经失效。<br />
#而一般情况下,因为网络延迟等原因,总会导致replicas中消息同步滞后。<br />
#如果消息严重滞后,leader将认为此relicas网络延迟较大或者消息吞吐能力有限。在broker数量较少,或者网络不足的环境中,建议提高此值.<br />
replica.lag.max.messages = 4000<br />
#leader与relicas的socket超时时间<br />
replica.socket.timeout.ms=30000<br />
# leader复制的socket缓存大小 64k<br />
replica.socket.receive.buffer.bytes=65536<br />
# replicas每次获取数据的最大字节数 默认1M <br />
replica.fetch.max.bytes=2097152<br />
# 每一个fetch操作的最小数据尺寸,如果leader中尚未同步的数据不足此值,将会等待直到数据达到这个大小<br />
replica.fetch.min.bytes=1<br />
# replicas同leader之间通信的最大等待时间，失败了会重试<br />
replica.fetch.wait.max.ms=5000<br />
# leader中进行复制的线程数，增大这个数值会增加relipca的IO 默认1<br />
num.replica.fetchers=3<br />
# 每个replica将最高水位进行flush的时间间隔<br />
replica.high.watermark.checkpoint.interval.ms=5000<br />
<br />
# 是否自动平衡broker之间的分配策略 默认false<br />
auto.leader.rebalance.enable=true<br />
# leader的不平衡比例，若是超过这个数值，会对分区进行重新的平衡<br />
#leader.imbalance.per.broker.percentage = 10<br />
# 检查leader是否不平衡的时间间隔<br />
#leader.imbalance.check.interval.seconds = 300<br />
# 客户端保留offset信息的最大空间大小<br />
#offset.metadata.max.bytes = 1024<br />
<br />
<br />
<span style="color:green">########################################## Consumer 
##########################################</span><br />
# 决定该Consumer归属的唯一组ID 手动设置<br />
#group.id<br />
# 对于zookeeper集群的指定，必须和broker使用同样的zk配置<br />
zookeeper.connect=slave1:2181,slave2:2181,slave3:2181<br />
# zookeeper的心跳超时时间<br />
zookeeper.session.timeout.ms=6000<br />
<br />
<span style="color:green">########################################## ganglia 监控 
##########################################</span><br />
kafka.ganglia.metrics.port=8671<br />
kafka.ganglia.metrics.host=TJMASTER<br />
kafka.ganglia.metrics.group=kafka<br />
kafka.metrics.reporters=kafka.ganglia.KafkaGangliaMetricsReporter<br />
kafka.ganglia.metrics.reporter.enabled=true<br />
<br />
<br />
<span style="color:green">
########################################## unknown 
##########################################</span><br />
fetch.purgatory.purge.interval.requests=10000<br />
producer.purgatory.purge.interval.requests=10000<br />
<br />
<br />


</body>

</html>
